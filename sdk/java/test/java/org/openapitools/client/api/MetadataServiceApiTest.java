/*
 * api/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCreateArtifactResponse;
import org.openapitools.client.model.ApiCreateArtifactTypeResponse;
import org.openapitools.client.model.ApiCreateExecutionResponse;
import org.openapitools.client.model.ApiCreateExecutionTypeResponse;
import org.openapitools.client.model.ApiGetArtifactResponse;
import org.openapitools.client.model.ApiGetArtifactTypeResponse;
import org.openapitools.client.model.ApiGetExecutionResponse;
import org.openapitools.client.model.ApiGetExecutionTypeResponse;
import org.openapitools.client.model.ApiListArtifactTypesResponse;
import org.openapitools.client.model.ApiListArtifactsResponse;
import org.openapitools.client.model.ApiListEventsResponse;
import org.openapitools.client.model.ApiListExecutionTypesResponse;
import org.openapitools.client.model.ApiListExecutionsResponse;
import org.openapitools.client.model.ApiUpdateArtifactTypeResponse;
import org.openapitools.client.model.ApiUpdateExecutionTypeResponse;
import org.openapitools.client.model.MlMetadataArtifact;
import org.openapitools.client.model.MlMetadataArtifactType;
import org.openapitools.client.model.MlMetadataEvent;
import org.openapitools.client.model.MlMetadataExecution;
import org.openapitools.client.model.MlMetadataExecutionType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataServiceApi
 */
@Ignore
public class MetadataServiceApiTest {

    private final MetadataServiceApi api = new MetadataServiceApi();

    
    /**
     * NOTE: The order of the following RPC methods affects the order of matching a particular HTTP path. So put a more specific path pattern before a generic one. For example, GET /api/v1alpha1/artifact_types/{parent}/artifacts should appear before GET /api/v1alpha1/artifact_types/{name} to be possibly matched.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createArtifactTest() throws ApiException {
        String parent = null;
        MlMetadataArtifact body = null;
        ApiCreateArtifactResponse response = api.createArtifact(parent, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createArtifactTypeTest() throws ApiException {
        MlMetadataArtifactType body = null;
        ApiCreateArtifactTypeResponse response = api.createArtifactType(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventTest() throws ApiException {
        MlMetadataEvent body = null;
        Object response = api.createEvent(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExecutionTest() throws ApiException {
        String parent = null;
        MlMetadataExecution body = null;
        ApiCreateExecutionResponse response = api.createExecution(parent, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExecutionTypeTest() throws ApiException {
        MlMetadataExecutionType body = null;
        ApiCreateExecutionTypeResponse response = api.createExecutionType(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArtifactTest() throws ApiException {
        String id = null;
        String name = null;
        Object response = api.deleteArtifact(id, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArtifactTypeTest() throws ApiException {
        String name = null;
        Object response = api.deleteArtifactType(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExecutionTest() throws ApiException {
        String id = null;
        String name = null;
        Object response = api.deleteExecution(id, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExecutionTypeTest() throws ApiException {
        String name = null;
        Object response = api.deleteExecutionType(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArtifactTest() throws ApiException {
        String id = null;
        String name = null;
        ApiGetArtifactResponse response = api.getArtifact(id, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArtifactTypeTest() throws ApiException {
        String name = null;
        ApiGetArtifactTypeResponse response = api.getArtifactType(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() throws ApiException {
        String id = null;
        String name = null;
        ApiGetExecutionResponse response = api.getExecution(id, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTypeTest() throws ApiException {
        String name = null;
        ApiGetExecutionTypeResponse response = api.getExecutionType(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listArtifactTypesTest() throws ApiException {
        ApiListArtifactTypesResponse response = api.listArtifactTypes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listArtifactsTest() throws ApiException {
        String name = null;
        ApiListArtifactsResponse response = api.listArtifacts(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listArtifacts2Test() throws ApiException {
        String name = null;
        ApiListArtifactsResponse response = api.listArtifacts2(name);

        // TODO: test validations
    }
    
    /**
     * List events based on an artifact or execution id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        String name = null;
        ApiListEventsResponse response = api.listEvents(name);

        // TODO: test validations
    }
    
    /**
     * List events based on an artifact or execution id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEvents2Test() throws ApiException {
        String name = null;
        ApiListEventsResponse response = api.listEvents2(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExecutionTypesTest() throws ApiException {
        ApiListExecutionTypesResponse response = api.listExecutionTypes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExecutionsTest() throws ApiException {
        String name = null;
        ApiListExecutionsResponse response = api.listExecutions(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExecutions2Test() throws ApiException {
        String name = null;
        ApiListExecutionsResponse response = api.listExecutions2(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateArtifactTypeTest() throws ApiException {
        MlMetadataArtifactType body = null;
        ApiUpdateArtifactTypeResponse response = api.updateArtifactType(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExecutionTypeTest() throws ApiException {
        MlMetadataExecutionType body = null;
        ApiUpdateExecutionTypeResponse response = api.updateExecutionType(body);

        // TODO: test validations
    }
    
}
