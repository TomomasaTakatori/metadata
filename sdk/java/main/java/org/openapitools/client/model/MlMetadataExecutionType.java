/*
 * api/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MlMetadataArtifactStructType;
import org.openapitools.client.model.MlMetadataPropertyType;

/**
 * MlMetadataExecutionType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-29T15:59:29.714+09:00[Asia/Tokyo]")
public class MlMetadataExecutionType {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, MlMetadataPropertyType> properties = new HashMap<String, MlMetadataPropertyType>();

  public static final String SERIALIZED_NAME_INPUT_TYPE = "input_type";
  @SerializedName(SERIALIZED_NAME_INPUT_TYPE)
  private MlMetadataArtifactStructType inputType = null;

  public static final String SERIALIZED_NAME_OUTPUT_TYPE = "output_type";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TYPE)
  private MlMetadataArtifactStructType outputType = null;

  public MlMetadataExecutionType id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the type. 1-1 relationship between type names and IDs.
   * @return id
  **/
  @ApiModelProperty(value = "The id of the type. 1-1 relationship between type names and IDs.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MlMetadataExecutionType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the type. It must be unique among ExecutionTypes within a database instance.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the type. It must be unique among ExecutionTypes within a database instance.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MlMetadataExecutionType properties(Map<String, MlMetadataPropertyType> properties) {
    this.properties = properties;
    return this;
  }

  public MlMetadataExecutionType putPropertiesItem(String key, MlMetadataPropertyType propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, MlMetadataPropertyType>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The schema of the type. Properties are always optional in the execution.
   * @return properties
  **/
  @ApiModelProperty(value = "The schema of the type. Properties are always optional in the execution.")
  public Map<String, MlMetadataPropertyType> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, MlMetadataPropertyType> properties) {
    this.properties = properties;
  }

  public MlMetadataExecutionType inputType(MlMetadataArtifactStructType inputType) {
    this.inputType = inputType;
    return this;
  }

   /**
   * Get inputType
   * @return inputType
  **/
  @ApiModelProperty(value = "")
  public MlMetadataArtifactStructType getInputType() {
    return inputType;
  }

  public void setInputType(MlMetadataArtifactStructType inputType) {
    this.inputType = inputType;
  }

  public MlMetadataExecutionType outputType(MlMetadataArtifactStructType outputType) {
    this.outputType = outputType;
    return this;
  }

   /**
   * Get outputType
   * @return outputType
  **/
  @ApiModelProperty(value = "")
  public MlMetadataArtifactStructType getOutputType() {
    return outputType;
  }

  public void setOutputType(MlMetadataArtifactStructType outputType) {
    this.outputType = outputType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MlMetadataExecutionType mlMetadataExecutionType = (MlMetadataExecutionType) o;
    return Objects.equals(this.id, mlMetadataExecutionType.id) &&
        Objects.equals(this.name, mlMetadataExecutionType.name) &&
        Objects.equals(this.properties, mlMetadataExecutionType.properties) &&
        Objects.equals(this.inputType, mlMetadataExecutionType.inputType) &&
        Objects.equals(this.outputType, mlMetadataExecutionType.outputType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, properties, inputType, outputType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MlMetadataExecutionType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

