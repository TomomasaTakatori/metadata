/*
 * api/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.EventPath;
import org.openapitools.client.model.MlMetadataEventType;

/**
 * An event represents a relationship between an artifact ID and an execution. There are four kinds of events, relating to both input and output, as well as declared versus undeclared. For example, the DECLARED_INPUT events are part of the signature of an execution. For example, consider: my_execution({\&quot;data\&quot;:[3,7],\&quot;schema\&quot;:8}) Where 3, 7, and 8 are artifact_ids. Assuming execution_id is 12, this becomes: {artifact_id:3, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\&quot;key\&quot;:\&quot;data\&quot;},{\&quot;index\&quot;:0}]}} {artifact_id:7, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\&quot;key\&quot;:\&quot;data\&quot;},{\&quot;index\&quot;:1}]}} {artifact_id:8, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\&quot;key\&quot;:\&quot;schema\&quot;}]}} The INPUT is an artifact actually read by the execution. The OUTPUT is an artifact actually written by the execution. The DECLARED_OUTPUT are the artifacts that are the \&quot;official\&quot; output. For example, the trainer may output multiple caches of the parameters (as OUTPUT objects), but then finally write the SavedModel as a DECLARED_OUTPUT. TODO(martinz): add a type for Event, similar to ArtifactType.
 */
@ApiModel(description = "An event represents a relationship between an artifact ID and an execution. There are four kinds of events, relating to both input and output, as well as declared versus undeclared. For example, the DECLARED_INPUT events are part of the signature of an execution. For example, consider: my_execution({\"data\":[3,7],\"schema\":8}) Where 3, 7, and 8 are artifact_ids. Assuming execution_id is 12, this becomes: {artifact_id:3, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"data\"},{\"index\":0}]}} {artifact_id:7, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"data\"},{\"index\":1}]}} {artifact_id:8, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"schema\"}]}} The INPUT is an artifact actually read by the execution. The OUTPUT is an artifact actually written by the execution. The DECLARED_OUTPUT are the artifacts that are the \"official\" output. For example, the trainer may output multiple caches of the parameters (as OUTPUT objects), but then finally write the SavedModel as a DECLARED_OUTPUT. TODO(martinz): add a type for Event, similar to ArtifactType.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-29T15:59:29.714+09:00[Asia/Tokyo]")
public class MlMetadataEvent {
  public static final String SERIALIZED_NAME_ARTIFACT_ID = "artifact_id";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_ID)
  private String artifactId;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "execution_id";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private EventPath path = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private MlMetadataEventType type = MlMetadataEventType.UNKNOWN;

  public static final String SERIALIZED_NAME_MILLISECONDS_SINCE_EPOCH = "milliseconds_since_epoch";
  @SerializedName(SERIALIZED_NAME_MILLISECONDS_SINCE_EPOCH)
  private String millisecondsSinceEpoch;

  public MlMetadataEvent artifactId(String artifactId) {
    this.artifactId = artifactId;
    return this;
  }

   /**
   * The artifact id is required for an event, and should refer to an existing artifact.
   * @return artifactId
  **/
  @ApiModelProperty(value = "The artifact id is required for an event, and should refer to an existing artifact.")
  public String getArtifactId() {
    return artifactId;
  }

  public void setArtifactId(String artifactId) {
    this.artifactId = artifactId;
  }

  public MlMetadataEvent executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

   /**
   * The execution_id is required for an event, and should refer to an existing execution.
   * @return executionId
  **/
  @ApiModelProperty(value = "The execution_id is required for an event, and should refer to an existing execution.")
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }

  public MlMetadataEvent path(EventPath path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(value = "")
  public EventPath getPath() {
    return path;
  }

  public void setPath(EventPath path) {
    this.path = path;
  }

  public MlMetadataEvent type(MlMetadataEventType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public MlMetadataEventType getType() {
    return type;
  }

  public void setType(MlMetadataEventType type) {
    this.type = type;
  }

  public MlMetadataEvent millisecondsSinceEpoch(String millisecondsSinceEpoch) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    return this;
  }

   /**
   * Get millisecondsSinceEpoch
   * @return millisecondsSinceEpoch
  **/
  @ApiModelProperty(value = "")
  public String getMillisecondsSinceEpoch() {
    return millisecondsSinceEpoch;
  }

  public void setMillisecondsSinceEpoch(String millisecondsSinceEpoch) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MlMetadataEvent mlMetadataEvent = (MlMetadataEvent) o;
    return Objects.equals(this.artifactId, mlMetadataEvent.artifactId) &&
        Objects.equals(this.executionId, mlMetadataEvent.executionId) &&
        Objects.equals(this.path, mlMetadataEvent.path) &&
        Objects.equals(this.type, mlMetadataEvent.type) &&
        Objects.equals(this.millisecondsSinceEpoch, mlMetadataEvent.millisecondsSinceEpoch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, executionId, path, type, millisecondsSinceEpoch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MlMetadataEvent {\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    millisecondsSinceEpoch: ").append(toIndentedString(millisecondsSinceEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

