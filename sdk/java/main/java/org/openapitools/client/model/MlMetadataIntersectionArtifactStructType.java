/*
 * api/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.MlMetadataArtifactStructType;

/**
 * A member of this type must satisfy all constraints. This primarily useful not as an end-user type, but something calculated as an intermediate type in the system.  For example, suppose you have a method: def infer_my_input_type(a): # try to infer the input type of this method.   use_in_method_x(a) # with input type x_input   use_in_method_y(a) # with input type y_input  Given this information, you know that infer_my_input_type has type {\&quot;intersection\&quot;:{\&quot;constraints\&quot;:[x_input, y_input]}}.  IntersectionArtifactStructType intersection_type &#x3D; {\&quot;constraints\&quot;:[     {\&quot;dict\&quot;:{\&quot;properties\&quot;:{\&quot;schema\&quot;:{\&quot;any\&quot;:{}}},              \&quot;extra_properties\&quot;:{\&quot;any\&quot;:{}}}},     {\&quot;dict\&quot;:{\&quot;properties\&quot;:{\&quot;data\&quot;:{\&quot;any\&quot;:{}}},              \&quot;extra_properties\&quot;:{\&quot;any\&quot;:{}}}}]} Since the first constraint requires the dictionary to have a schema property, and the second constraint requires it to have a data property, this is equivalent to: ArtifactStructType other_type &#x3D;      {\&quot;dict\&quot;:{\&quot;properties\&quot;:{\&quot;schema\&quot;:{\&quot;any\&quot;:{}},\&quot;data\&quot;:{\&quot;any\&quot;:{}}}},       \&quot;extra_properties\&quot;:{\&quot;any\&quot;:{}}}
 */
@ApiModel(description = "A member of this type must satisfy all constraints. This primarily useful not as an end-user type, but something calculated as an intermediate type in the system.  For example, suppose you have a method: def infer_my_input_type(a): # try to infer the input type of this method.   use_in_method_x(a) # with input type x_input   use_in_method_y(a) # with input type y_input  Given this information, you know that infer_my_input_type has type {\"intersection\":{\"constraints\":[x_input, y_input]}}.  IntersectionArtifactStructType intersection_type = {\"constraints\":[     {\"dict\":{\"properties\":{\"schema\":{\"any\":{}}},              \"extra_properties\":{\"any\":{}}}},     {\"dict\":{\"properties\":{\"data\":{\"any\":{}}},              \"extra_properties\":{\"any\":{}}}}]} Since the first constraint requires the dictionary to have a schema property, and the second constraint requires it to have a data property, this is equivalent to: ArtifactStructType other_type =      {\"dict\":{\"properties\":{\"schema\":{\"any\":{}},\"data\":{\"any\":{}}}},       \"extra_properties\":{\"any\":{}}}")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-29T15:59:29.714+09:00[Asia/Tokyo]")
public class MlMetadataIntersectionArtifactStructType {
  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private List<MlMetadataArtifactStructType> constraints = new ArrayList<MlMetadataArtifactStructType>();

  public MlMetadataIntersectionArtifactStructType constraints(List<MlMetadataArtifactStructType> constraints) {
    this.constraints = constraints;
    return this;
  }

  public MlMetadataIntersectionArtifactStructType addConstraintsItem(MlMetadataArtifactStructType constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<MlMetadataArtifactStructType>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Get constraints
   * @return constraints
  **/
  @ApiModelProperty(value = "")
  public List<MlMetadataArtifactStructType> getConstraints() {
    return constraints;
  }

  public void setConstraints(List<MlMetadataArtifactStructType> constraints) {
    this.constraints = constraints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MlMetadataIntersectionArtifactStructType mlMetadataIntersectionArtifactStructType = (MlMetadataIntersectionArtifactStructType) o;
    return Objects.equals(this.constraints, mlMetadataIntersectionArtifactStructType.constraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MlMetadataIntersectionArtifactStructType {\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

